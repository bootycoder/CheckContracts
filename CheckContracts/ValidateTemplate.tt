<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Linq;
using JetBrains.Annotations;

<#
var signedIntegerTypes = new []{ "sbyte", "short", "int", "long" };
var unsignedIntegerTyper = new []{ "byte", "ushort", "uint", "ulong" };
var integerTypes = signedIntegerTypes.Concat(unsignedIntegerTyper).ToArray();
var floatingPointTypes = new[]{"double", "float"};
var comparableTypes = integerTypes.Concat(floatingPointTypes).Concat(new []{ "DateTime", "TimeSpan" }).ToArray();
var equalityTypes = comparableTypes.Concat(new[]{ "string" }).ToArray();

var checksArray = new []
{
    Tuple.Create(
        "GreaterThan",
        comparableTypes,
        new []{"value", "minValue"},
        "value > minValue",
        "Value of type {0} should be greater than {1}. Current value: {2}",
        "value.GetType(), value, minValue",
        "Checks that input value is greater (and not equal with) minValue",
        ""
        ),

    Tuple.Create(
        "GreaterOrEqualThan",
        comparableTypes,
        new []{"value", "minValue"},
        "value >= minValue",
        "Value of type {0} should be greater or equal than {1}. Current value: {2}",
        "value.GetType(), value, minValue",
        "Checks that input value is greater or equal with minValue",
        ""
        ),

    Tuple.Create(
        "LessThan",
        comparableTypes,
        new []{"value", "maxValue"},
        "value < maxValue",
        "Value of type {0} should be less than {1}. Current value: {2}",
        "value.GetType(), value, maxValue",
        "Checks that input value is less (and not equal with) maxValue",
        ""
        ),

    Tuple.Create(
        "LessOrEqualThan",
        comparableTypes,
        new []{"value", "maxValue"},
        "value <= maxValue",
        "Value of type {0} should be less or equal than {1}. Current value: {2}",
        "value.GetType(), value, maxValue",
        "Checks that input value is less or equal with maxValue",
        ""
        ),

    Tuple.Create(
        "Between",
        comparableTypes,
        new []{ "value", "minValue", "maxValue" },
        "minValue <= value && value <= maxValue",
        "Value of type {0} should be between {1} and {2} (inclusive). Current value: {3}",
        "value.GetType(), value, minValue, maxValue",
        "Checks that input value is between minValue and maxValue (inclusive)",
        ""
        ),

    Tuple.Create(
        "EqualsWith<TValue>",
        new [] {"TValue"},
        new []{ "value", "expected" },
        "ReferenceEquals(value, expected) || (!ReferenceEquals(expected, null) && expected.Equals(value)) || (!ReferenceEquals(value, null) && value.Equals(expected))",
        "Value of type {0} should be {1} but was {2}",
        "typeof(TValue), value, expected",
        "Checks that value is equals with expected value",
        ""
        ),

    Tuple.Create(
        "CollectionHasElements<TValue>",
        new [] {"IEnumerable<TValue>"},
        new []{ "collection" },
        "!ReferenceEquals(null, collection) && collection.Any()",
        "Collection with elements of type {0} should not be empty. Collection is {1}null",
        "typeof(TValue), ReferenceEquals(null, collection) ? string.Empty : \"not \"",
        "Checks that input collection has elements",
        ""
        ),

    Tuple.Create(
        "Condition",
        new [] {"bool"},
        new []{ "condition" },
        "condition",
        "Condition was failed",
        "",
        "Condition check",
        ""
        ),

    Tuple.Create(
        "StringIsMeanful",
        new [] {"string"},
        new []{ "inputString" },
        "string.IsNullOrWhiteSpace(inputString)",
        "Input string is empty: '{0}'",
        "inputString ?? \"{null}\"",
        "Checks that input string is not null, is not empty and is not writespace",
        ""
        ),

    Tuple.Create(
        "EnumerationValueIsDefined<TEnum>",
        new [] {"TEnum"},
        new []{ "enumeration" },
        "Enum.IsDefined(typeof(TEnum), enumeration)",
        "Enumeration value {0} is not defined for type {1}",
        "enumeration, typeof(TEnum)",
        "Checks that enumeration value is defined. Uses Enum.IsDefined function",
        "where TEnum : struct, IConvertible"
        ),

};

#>


namespace CheckContracts
{
    partial class Validate
    {
<#
    foreach(var item in checksArray)
    {
        foreach(var type in item.Item2)
        {
        #>

        /// <summary>
        /// <#=item.Item7#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [GeneratedCode("T4 Code Generator", "1.0")]
        public static void <#=item.Item1#>(<#=string.Join(", ", item.Item3.Select(i=>string.Format("{0} {1}", type, i ) ) )#>, [NotNull] string errorFormat, [NotNull] params object[] args ) <#=item.Rest.Item1#>
        {
            if(<#=item.Item4#>)
                return;

            var message = BuildMessage("<#=item.Item5#>", new object[]{ <#=item.Item6#> }, errorFormat, args);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item.Item7#>
        /// </summary>
        [GeneratedCode("T4 Code Generator", "1.0")]
        public static void <#=item.Item1#>(<#=string.Join(", ", item.Item3.Select(i=>string.Format("{0} {1}", type, i ) ) )#>) <#=item.Rest.Item1#>
        {
            if(<#=item.Item4#>)
                return;

            var message = BuildMessage("<#=item.Item5#>", new object[]{ <#=item.Item6#> }, null, null);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item.Item7#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [GeneratedCode("T4 Code Generator", "1.0")]
        public static void Argument<#=item.Item1#>(<#=string.Join(", ", item.Item3.Select(i=>string.Format("{0} {1}", type, i ) ) )#>, [InvokerParameterName, NotNull] string argumentName, [NotNull] string errorFormat, [NotNull] params object[] args) <#=item.Rest.Item1#>
        {
            if(<#=item.Item4#>)
                return;

            var message = BuildMessage("<#=item.Item5#>", new object[]{ <#=item.Item6#> }, errorFormat, args, argumentName);

            throw new ArgumentException(message);
        }

        /// <summary>
        /// <#=item.Item7#>
        /// </summary>        
        [GeneratedCode("T4 Code Generator", "1.0")]
        public static void Argument<#=item.Item1#>(<#=string.Join(", ", item.Item3.Select(i=>string.Format("{0} {1}", type, i ) ))#>, [InvokerParameterName, NotNull] string argumentName) <#=item.Rest.Item1#>
        {
            if(<#=item.Item4#>)
                return;

            var message = BuildMessage("<#=item.Item5#>", new object[]{ <#=item.Item6#> }, null, null, argumentName);

            throw new ArgumentException(message);
        }
        <#
        }
    }


#>        
    }
}