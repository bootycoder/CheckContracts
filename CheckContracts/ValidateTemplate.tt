<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Linq;
using JetBrains.Annotations;

<#
var signedIntegerTypes = new []{ "sbyte", "short", "int", "long" };
var unsignedIntegerTyper = new []{ "byte", "ushort", "uint", "ulong" };
var integerTypes = signedIntegerTypes.Concat(unsignedIntegerTyper).ToArray();
var floatingPointTypes = new[]{"double", "float"};
var comparableTypes = integerTypes.Concat(floatingPointTypes).Concat(new []{ "DateTime", "TimeSpan" }).ToArray();
var equalityTypes = comparableTypes.Concat(new[]{ "string" }).ToArray();

var primitiveTypes = new HashSet<string>(comparableTypes.Concat(new[]{"bool", "TEnum", "TValueType"}));

var checksArray = new []
{
    new object[]{
        "GreaterThanZero",
        new[] {"int", "double"},
        new []{"value"},
        "value > 0",
        "Value of type {0} should be greater than zero. Current value: {1}",
        "value.GetType(), value",
        "Checks that input value is greater zero",
        "",
        "",
        "",
		""
        },

    new object[]{
        "GreaterOrEqualThanZero",
        new[] {"int", "double"},
        new []{"value"},
        "value >= 0",
        "Value of type {0} should be greater or equal than zero. Current value: {1}",
        "value.GetType(), value",
        "Checks that input value is greater or equal than zero",
        "",
        "",
        "",
		""
        },

    new object[]{
        "GreaterThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "minValue"},
        "value.CompareTo(minValue) > 0",
        "Value of type {0} should be greater than {2}. Current value: {1}",
        "typeof(TValueType), value, minValue",
        "Checks that input value is greater (and not equal with) minValue",
        "where TValueType : struct, IComparable<TValueType>",
        "",
        "",
		""
        },

    new object[]{
        "GreaterOrEqualThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "minValue"},
        "value.CompareTo(minValue) >= 0",
        "Value of type {0} should be greater or equal than {2}. Current value: {1}",
        "typeof(TValueType), value, minValue",
        "Checks that input value is greater or equal with minValue",
        "where TValueType : struct, IComparable<TValueType>",
        "",
        "",
		""
        },

    new object[]{
        "LessThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "maxValue"},
        "value.CompareTo(maxValue) < 0",
        "Value of type {0} should be less than {2}. Current value: {1}",
        "typeof(TValueType), value, maxValue",
        "Checks that input value is less (and not equal with) maxValue",
        "where TValueType : struct, IComparable<TValueType>",
        "",
        "",
		""
        },

    new object[]{
        "LessOrEqualThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "maxValue"},
        "value.CompareTo(maxValue) <= 0",
        "Value of type {0} should be less or equal than {2}. Current value: {1}",
        "typeof(TValueType), value, maxValue",
        "Checks that input value is less or equal with maxValue",
        "where TValueType : struct, IComparable<TValueType>",
        "",
        "",
		""
        },

    new object[]{
        "Between<TValueType>",
        new[] {"TValueType"},
        new []{ "value", "minValue", "maxValue" },
        "value.CompareTo(minValue) >= 0 && value.CompareTo(maxValue) <= 0",
        "Value of type {0} should be between {2} and {3} (inclusive). Current value: {1}",
        "typeof(TValueType), value, minValue, maxValue",
        "Checks that input value is between minValue and maxValue (inclusive)",
        "where TValueType : struct, IComparable<TValueType>",
        "",
        "",
		""
        },

    new object[]{
        "EqualsWith<TValue>",
        new [] {"TValue"},
        new []{ "value", "expected" },
        "ReferenceEquals(value, expected) || (!ReferenceEquals(expected, null) && expected.Equals(value)) || (!ReferenceEquals(value, null) && value.Equals(expected))",
        "Value of type {0} should be {2} but was {1}",
        "typeof(TValue), value, expected",
        "Checks that value is equal with expected value",
        "",
        "",
        "",
		""
        },

    new object[]{
        "NotEqualsWith<TValue>",
        new [] {"TValue"},
        new []{ "value", "expected" },
        "!ReferenceEquals(value, expected) && ((!ReferenceEquals(value, null) && !value.Equals(expected)) || (!ReferenceEquals(expected, null) && !expected.Equals(value)))",
        "Value of type {0} should not be {1} they are equal",
        "typeof(TValue), expected",
        "Checks that value is not equal with expected value",
        "",
        "",
        "",
		""
        },

    new object[]{
        "EnumerableHasElements<TValue>",
        new [] {"IEnumerable<TValue>"},
        new []{ "collection" },
        "!ReferenceEquals(null, collection) && collection.Any()",
        "Enumerable with elements of type {0} should not be empty. Collection is {1}null",
        "typeof(TValue), ReferenceEquals(null, collection) ? string.Empty : \"not \"",
        "Checks that input collection has elements",
        "",
        "[ContractAnnotation(\"collection:null=>halt\")][CollectionAccess(CollectionAccessType.Read)]",
        "",
		""
        },

    new object[]{
        "CollectionHasElements<TValue>",
        new [] {"IReadOnlyCollection<TValue>"},
        new []{ "collection" },
        "!ReferenceEquals(null, collection) && collection.Count > 0",
        "Collection with elements of type {0} should not be empty. Collection is {1}null",
        "typeof(TValue), ReferenceEquals(null, collection) ? string.Empty : \"not \"",
        "Checks that input collection has elements",
        "",
        "[ContractAnnotation(\"collection:null=>halt\")][CollectionAccess(CollectionAccessType.Read)]",
        "",
		"ReadonlyCollectionDefined"
        },
		
    new object[]{
        "IsIn<TValue>",
        new [] {"TValue"},
        new []{ "value", "[NotNull]IReadOnlyCollection<TValue> allowedItems" },
        "!ReferenceEquals(null, allowedItems) && allowedItems.Contains(value)",
        "Item {0} (type - '{1}') should be one of the following: '{2}'.",
        "value, typeof(TValue), ReferenceEquals(null, allowedItems) ? \"null\" : string.Join(\", \", allowedItems)", 
        "Checks, that collection contains the target value",
        "",
        "[ContractAnnotation(\"allowedItems:null=>halt\")][ContractAnnotation(\"value:null=>halt\")][CollectionAccess(CollectionAccessType.Read)]",
        "",
		"ReadonlyCollectionDefined"
        },

    new object[]{
        "Condition",
        new [] {"bool"},
        new []{ "condition" },
        "condition",
        "Condition was failed",
        "",
        "Condition check",
        "",
        "[ContractAnnotation(\"condition:null=>halt\")]",
        "",
		""
        },

    new object[]{
        "StringIsMeanful",
        new [] {"string"},
        new []{ "inputString" },
        "!string.IsNullOrWhiteSpace(inputString)",
        "Input string is empty: '{0}'",
        "inputString ?? \"{null}\"",
        "Checks that input string is not null, is not empty and is not writespace",
        "",
        "[ContractAnnotation(\"inputString:null=>halt\")]",
        "",
		""
        },

    new object[]{
        "EnumerationValueIsDefined<TEnum>",
        new [] {"TEnum"},
        new []{ "enumeration" },
        "Enum.IsDefined(typeof(TEnum), enumeration)",
        "Enumeration value {0} is not defined for type {1}",
        "enumeration, typeof(TEnum)",
        "Checks that enumeration value is defined. Uses Enum.IsDefined function",
        "where TEnum : struct",
        "",
        "",
		""
        },

    new object[]{
        "DateIsReal",
        new [] {"DateTime"},
        new []{ "inputDate" },
        "inputDate > MinDate",
        "Date should be more than {0}. Actual value: {1}",
        "MinDate, inputDate",
        "Checks that input date has year more than 1900. This check is useful to avoid default(DateTime) value (with year 0001) and the same dates near it",
        "",
        "",
        "",
		""
        },

};

#>


namespace CheckContracts
{
    partial class Validate
    {
<#
    foreach(var item in checksArray)
    {
        foreach(var type in (string[])item[1])
        {
            var contractAnnotations = ((string)item[8]) ?? string.Empty;
			
            var baseArguments = string.Join(", ", ((string[])item[2])
				.Select(i => i.Split(new char[]{' '}, StringSplitOptions.RemoveEmptyEntries))
				.Select(lines => new 
					{
						Name = lines.Last(),
						Type = lines.Length > 1 ? lines[0] : type,
						Lines = lines
					})
				.Select(i=> new 
					{
						Name = i.Name,
						Type = i.Type,						
						CanBeNullAttribute = i.Lines.Length > 1 || primitiveTypes.Contains(i.Type) ? string.Empty : "[CanBeNull]"
					})
				.Select(i => string.Format("{0}{1} {2}", i.CanBeNullAttribute, i.Type, i.Name ) ) );
			var compileTimeCheck = (string)item[10];

			if(string.IsNullOrEmpty(compileTimeCheck))
			{
				compileTimeCheck = "true";
			}
        #>
#if (<#=compileTimeCheck#>)
        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [AssertionMethod]
        [GeneratedCode("T4 Code Generator", "1.0")]
		<#=contractAnnotations#>public static void <#=item[0]#>(<#=baseArguments#>, [NotNull] string errorFormat, [NotNull] params object[] args ) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, errorFormat, args);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [AssertionMethod]
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void <#=item[0]#>(<#=baseArguments#>) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, null, null);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [AssertionMethod]
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void Argument<#=item[0]#>(<#=baseArguments#>, [InvokerParameterName, NotNull] string argumentName, [NotNull] string errorFormat, [NotNull] params object[] args) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, errorFormat, args, argumentName);

            throw new ArgumentException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>        
        [AssertionMethod]
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void Argument<#=item[0]#>(<#=baseArguments#>, [InvokerParameterName, NotNull] string argumentName) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, null, null, argumentName);

            throw new ArgumentException(message);
        }
#endif
        <#
        }
    }


#>        
    }
}