<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Linq;
using JetBrains.Annotations;

<#
var signedIntegerTypes = new []{ "sbyte", "short", "int", "long" };
var unsignedIntegerTyper = new []{ "byte", "ushort", "uint", "ulong" };
var integerTypes = signedIntegerTypes.Concat(unsignedIntegerTyper).ToArray();
var floatingPointTypes = new[]{"double", "float"};
var comparableTypes = integerTypes.Concat(floatingPointTypes).Concat(new []{ "DateTime", "TimeSpan" }).ToArray();
var equalityTypes = comparableTypes.Concat(new[]{ "string" }).ToArray();

var primitiveTypes = new HashSet<string>(comparableTypes.Concat(new[]{"bool", "TEnum", "TValueType"}));

var checksArray = new []
{
    new object[]{
        "GreaterThanZero",
        new[] {"int", "double"},
        new []{"value"},
        "value > 0",
        "Value of type {0} should be greater than zero. Current value: {1}",
        "value.GetType(), value",
        "Checks that input value is greater zero",
        "",
        ""
        },

    new object[]{
        "GreaterOrEqualThanZero",
        new[] {"int", "double"},
        new []{"value"},
        "value >= 0",
        "Value of type {0} should be greater or equal than zero. Current value: {1}",
        "value.GetType(), value",
        "Checks that input value is greater or equal than zero",
        "",
        ""
        },

    new object[]{
        "GreaterThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "minValue"},
        "value.CompareTo(minValue) > 0",
        "Value of type {0} should be greater than {1}. Current value: {2}",
        "typeof(TValueType), value, minValue",
        "Checks that input value is greater (and not equal with) minValue",
        "where TValueType : struct, IComparable<TValueType>",
        ""
        },

    new object[]{
        "GreaterOrEqualThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "minValue"},
        "value.CompareTo(minValue) >= 0",
        "Value of type {0} should be greater or equal than {1}. Current value: {2}",
        "typeof(TValueType), value, minValue",
        "Checks that input value is greater or equal with minValue",
        "where TValueType : struct, IComparable<TValueType>",
        ""
        },

    new object[]{
        "LessThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "maxValue"},
        "value.CompareTo(maxValue) < 0",
        "Value of type {0} should be less than {1}. Current value: {2}",
        "typeof(TValueType), value, maxValue",
        "Checks that input value is less (and not equal with) maxValue",
        "where TValueType : struct, IComparable<TValueType>",
        ""
        },

    new object[]{
        "LessOrEqualThan<TValueType>",
        new[] {"TValueType"},
        new []{"value", "maxValue"},
        "value.CompareTo(maxValue) <= 0",
        "Value of type {0} should be less or equal than {1}. Current value: {2}",
        "typeof(TValueType), value, maxValue",
        "Checks that input value is less or equal with maxValue",
        "where TValueType : struct, IComparable<TValueType>",
        ""
        },

    new object[]{
        "Between<TValueType>",
        new[] {"TValueType"},
        new []{ "value", "minValue", "maxValue" },
        "value.CompareTo(minValue) >= 0 && value.CompareTo(maxValue) <= 0",
        "Value of type {0} should be between {1} and {2} (inclusive). Current value: {3}",
        "typeof(TValueType), value, minValue, maxValue",
        "Checks that input value is between minValue and maxValue (inclusive)",
        "where TValueType : struct, IComparable<TValueType>",
        ""
        },

    new object[]{
        "EqualsWith<TValue>",
        new [] {"TValue"},
        new []{ "value", "expected" },
        "ReferenceEquals(value, expected) || (!ReferenceEquals(expected, null) && expected.Equals(value)) || (!ReferenceEquals(value, null) && value.Equals(expected))",
        "Value of type {0} should be {1} but was {2}",
        "typeof(TValue), value, expected",
        "Checks that value is equal with expected value",
        "",
        ""
        },

    new object[]{
        "NotEqualsWith<TValue>",
        new [] {"TValue"},
        new []{ "value", "expected" },
        "!ReferenceEquals(value, expected) && ((!ReferenceEquals(value, null) && !value.Equals(expected)) || (!ReferenceEquals(expected, null) && !expected.Equals(value)))",
        "Value of type {0} should not be {1} they are equal",
        "typeof(TValue), value",
        "Checks that value is not equal with expected value",
        "",
        ""
        },

    new object[]{
        "CollectionHasElements<TValue>",
        new [] {"IEnumerable<TValue>"},
        new []{ "collection" },
        "!ReferenceEquals(null, collection) && collection.Any()",
        "Collection with elements of type {0} should not be empty. Collection is {1}null",
        "typeof(TValue), ReferenceEquals(null, collection) ? string.Empty : \"not \"",
        "Checks that input collection has elements",
        "",
        "collection:null=>halt"
        },

    new object[]{
        "Condition",
        new [] {"bool"},
        new []{ "condition" },
        "condition",
        "Condition was failed",
        "",
        "Condition check",
        "",
        "condition:false=>halt"
        },

    new object[]{
        "StringIsMeanful",
        new [] {"string"},
        new []{ "inputString" },
        "!string.IsNullOrWhiteSpace(inputString)",
        "Input string is empty: '{0}'",
        "inputString ?? \"{null}\"",
        "Checks that input string is not null, is not empty and is not writespace",
        "",
        "inputString:null=>halt"
        },

    new object[]{
        "EnumerationValueIsDefined<TEnum>",
        new [] {"TEnum"},
        new []{ "enumeration" },
        "Enum.IsDefined(typeof(TEnum), enumeration)",
        "Enumeration value {0} is not defined for type {1}",
        "enumeration, typeof(TEnum)",
        "Checks that enumeration value is defined. Uses Enum.IsDefined function",
        "where TEnum : struct, IConvertible",
        ""
        },

};

#>


namespace CheckContracts
{
    partial class Validate
    {
<#
    foreach(var item in checksArray)
    {
        foreach(var type in (string[])item[1])
        {
            var contractAnnotations = string.IsNullOrEmpty((string)item[8]) ? string.Empty : string.Format("[ContractAnnotation(\"{0}\")]{1}        ", item[8], Environment.NewLine);

            var canBeNullAttribute = primitiveTypes.Contains(type) ? string.Empty : "[CanBeNull] ";

            var baseArguments = string.Join(", ", ((string[])item[2]).Select(i=>string.Format("{0}{1} {2}", canBeNullAttribute, type, i ) ) );
        #>

        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void <#=item[0]#>(<#=baseArguments#>, [NotNull] string errorFormat, [NotNull] params object[] args ) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, errorFormat, args);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void <#=item[0]#>(<#=baseArguments#>) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, null, null);

            throw new InvalidOperationException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>
        [StringFormatMethod("errorFormat")]
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void Argument<#=item[0]#>(<#=baseArguments#>, [InvokerParameterName, NotNull] string argumentName, [NotNull] string errorFormat, [NotNull] params object[] args) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, errorFormat, args, argumentName);

            throw new ArgumentException(message);
        }

        /// <summary>
        /// <#=item[6]#>
        /// </summary>        
        [GeneratedCode("T4 Code Generator", "1.0")]
        <#=contractAnnotations#>public static void Argument<#=item[0]#>(<#=baseArguments#>, [InvokerParameterName, NotNull] string argumentName) <#=item[7]#>
        {
            if(<#=item[3]#>)
                return;

            var message = BuildMessage("<#=item[4]#>", new object[]{ <#=item[5]#> }, null, null, argumentName);

            throw new ArgumentException(message);
        }
        <#
        }
    }


#>        
    }
}